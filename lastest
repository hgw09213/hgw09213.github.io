// sql, js 퀴즈에서 각각 10문제

//
1~4 까지는 다른 언어와 똑같은 특징
3. 변수명을 첫글자 소문자 새로 워드가 시작하면 대문자로 (낙타처럼) 네이밍 하는 것을 권장
4. 함수 안에 선언 한 변수는 함수 안에서 스코프를 가짐 (지역변수)
5. 키워드 var로 선언한 변수는 블록 스코프를 안가짐 (함수에서는 예외) **중요
6. var의 블록 스코프 특징을 개선한 키워드가 let
7. let가 도입될 때 const도 같이 도입됨 ( 한 번 대입하면 수정 불가 )
8. 
9. 데이터 타입은 numbers, strings, objects가 대표
;


// 이 문장을 실행 했을 때 결과를 적는 게 시험 문제
var fruits = ["Banana", "Orange", "Apple", "Mango"];
var fLen = fruits.length; 
text = "<ul>";
for (i = 0; i < fLen; i++) {
  text += "<li>" + fruits[i] + "</li>";
}
text += "</ul>";
alert(text);

// 반복문 대신 for each 사용
text = "<ul>";
fruits.forEach(myFunction);
text += "</ul>";

function myFunction(value) {
  text += "<li>" + value + "</li>";
}
alert(text);

// in 키워드는 fname, lname, age에 해당하므로 John, Doe, 25가 출력 ( ** in을 사용한 문장의 결과를 적는 게 시험 문제 )
const person = {fname:"John", lname:"Doe", age:25};
let text = "";
for (let x in person) {
  text += person[x];
}
alert(text);
document.getElementById("demo").innerHTML = text;

// in을 사용함으로써 45, 5, 9, 16, 25가 출력됨
const numbers = [45, 4, 9, 16, 25];
let text = "";
for (let x in numbers) {
  text += numbers[x];
}
alert(text);

document.getElementById("demo").innerHTML = text;

// of는 array인 경우 바로 값 출
const numbers = [45, 4, 9, 16, 25];
let text = "";
for (let x of numbers) {
  text += "x";
}
alert(text);

document.getElementById("demo").innerHTML = text;

// 타입을 알려주는 키워드 typeof
const numbers = [45, 4, 9, 16, 25];
alert(typeof numbers);

// array인지 체크하는 키워드
alert(fruits instanceof Array);

// 오름차순, 내림차순 정렬 ( a - b 또는 b - a 사용 )
var points = [40, 100, 1, 5, 25, 10];
points.sort(function(a, b){return b - a});
alert(points);

//
const fruits = ["Apple", "Orange", "Apple", "Mango"];
let position = fruits.indexOf("Apple") + 1;

// 두 코드의 차이 알아보기
const fruits = ["Apple", "Orange", "Apple", "Mango"];
let position = fruits.lastIndexOf("Apple") + 1;

// map 사용시 전부 더한다
const numbers1 = [45, 4, 9, 16, 25];
const numbers2 = numbers1.map(myFunction);

// 조건을 만족하는지 확인
const numbers = [45, 4, 9, 16, 25];
const over18 = numbers.filter(myFunction);

// 왼쪽, 오른쪽 시작 차
const numbers = [45, 4, 9, 16, 25];
let sum = numbers.reduce(myFunction);
let sum = numbers.reduceRight(myFunction);

// every는 모두 만족하는지, some은 일부만 만족하는 지 체크
const numbers = [45, 4, 9, 16, 25];
let allOver18 = numbers.every(myFunction);
let someOver18 = numbers.some(myFunction);

//
Math.round(x)	 Returns x rounded to its nearest integer // 반올림
Math.ceil(x)	 Returns x rounded up to its nearest integer
Math.floor(x)	 Returns x rounded down to its nearest integer
Math.trunc(x)	 Returns the integer part of x (new in ES6)

// 조건 연산
var voteable = (age < 18) ? "Too young":"Old enough";








